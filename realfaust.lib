// =============================================================================
// ========== realfaust.lib ====================================================
// =============================================================================
// 
// This library contains a set of functions representing domain-limited 
// versions of all Faust primitives and math functions that can potentially 
// generate INF or NaN values. The goal of the library is to be able to 
// implement DSP networks that, structurally, are free from INF and NaN 
// values. Hence, the resulting programs should be rock-solid during real-time 
// performance and virtually immune to crashes regardless of how mercilessly
// a network is modulated or how unstable a recursive system is made.
// 
// List of functions:
//    times,
//    div,
//    plus,
//    minus,
//    rem,
//    mod,
//    float_mod,
//    power,
//    squareroot,
//    log_e,
//    log_2,
//    log_10,
//    cosine,
//    sine,
//    tangent,
//    arccos,
//    arcsin,
//    arctan,
//    arccosh,
//    arcsinh,
//    arctanh,
//    cosh,
//    sinh,
//    tanh.
//
// Copyright (c) 2019-2020, Dario Sanfilippo <sanfilippo.dario at gmail dot com>
// All rights reserved.

declare name "Real Faust Library";
declare author "Dario Sanfilippo";
declare copyright "Copyright (c) 2019-2020, Dario Sanfilippo <sanfilippo.dario
      at gmail dot com>";
declare version "1.0.1";
declare license "GPLv3.0";

ba = library("basics.lib");
ma = library("maths.lib");



// =============================================================================
// Auxiliary functions =========================================================
// =============================================================================

// -----------------------------------------------------------------------------
// Floating-point limit constants and clipping function.
//
MAX = ma.MAX;
MIN = ma.MIN;
E = ma.EPSILON;
clip(l, h, x) = max(l, min(h, x));
// -----------------------------------------------------------------------------

// =============================================================================



// =============================================================================
// Library functions ===========================================================
// =============================================================================

// -----------------------------------------------------------------------------
// Multiplication.
//
times(x, y) = clip(-MAX, MAX, x * y);
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Division.
//
div(x, y) = clip(-MAX, MAX, ba.if(y < 0, x / min(-MIN, y), x / max(MIN, y)));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Summation.
//
plus(x, y) = clip(-MAX, MAX, x + y);
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Subtraction.
//
minus(x, y) = clip(-MAX, MAX, x - y);
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Reminder.
//
rem(x, y) = ba.if(y < 0, x % min(-1, y), x % max(1, y));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Modulo.
//
mod(x, y) = ba.if(y < 0, ma.modulo(x, min(-1, y)), ma.modulo(x, max(1, y)));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Floating-point modulo.
//
float_mod(x, y) = ba.if(y < 0, fmod(x, min(-MIN, y)), fmod(x, max(MIN, y)));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Power.
//
power(x, y) = clip(-MAX, MAX, pow(x, y));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Square root.
//
squareroot(x) = sqrt(clip(0, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Base-e logarithm.
//
log_e(x) = log(clip(MIN, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Base-2 logarithm.
//
log_2(x) = ma.log2(clip(MIN, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Base-10 logarithm.
//
log_10(x) = log10(clip(MIN, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Cosine.
//
cosine(x) = cos(clip(-MAX, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Sine.
//
sine(x) = sin(clip(-MAX, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Tangent.
//
tangent(x) = tan(clip(-MAX, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Arc cosine.
//
arccos(x) = acos(clip(-1, 1, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Arc sine.
//
arcsin(x) = asin(clip(-1, 1, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Arc tangent.
//
arctan(x) = atan(clip(-MAX, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Arc hyperbolic cosine.
//
arccosh(x) = ma.acosh(clip(1, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Arc hyperbolic sine.
//
arcsinh(x) = ma.asinh(clip(-MAX, MAX, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Arc hyperbolic tangent.
//
arctanh(x) = ma.atanh(clip(-1 + E, 1 - E, x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Hyperbolic cosine.
//
cosh(x) = min(MAX, ma.cosh(x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Hyperbolic sine.
//
sinh(x) = clip(-MAX, MAX, ma.sinh(x));
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Hyperbolic tangent.
//
tanh(x) = ma.tanh(clip(-MAX, MAX, x));
// -----------------------------------------------------------------------------

// =============================================================================
